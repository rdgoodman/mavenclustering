package clustering;

import java.util.ArrayList;

public class ClusterSet {

	private ArrayList<Cluster> clusters;
	private double withinClusterSumSq;
	private double betweenClusterSumSq;

	/**
	 * Stores the results of a clustering algorithm
	 * 
	 * @param clusters
	 *            set of clusters generated by a run() method
	 */
	public ClusterSet(ArrayList<Cluster> clusters) {
		this.clusters = clusters;
	}

	/**
	 * Calculates cohesion as within-cluster sum of squares (WCSS)
	 */
	public double calcCohesion() {
		double coh = 0;
		for (Cluster c : clusters) {
			double c_coh = 0;
			for (Datum d1 : c.getPts()) {
				for (Datum d2 : c.getPts()) {
					if (!d1.equals(d2)) {
						// TODO: double counting
						c_coh += d1.calcDist(d2);
					}
				}
			}
			coh += (c_coh / c.getPts().size());
		}
		return coh;
	}

	/**
	 * Calculates separation
	 */
	public double calcSeparation() {

		double sep = 0;
		for (Cluster c1 : clusters) {
			for (Cluster c2 : clusters) {
				if (!c1.equals(c2)) {
					for (Datum d1 : c1.getPts()) {
						for (Datum d2 : c2.getPts()) {
							// TODO: double counting
							sep += d1.calcDist(d2);
						}
					}
				}
			}
		}

		return sep;
	}

	/** Getters and setters */

	public ArrayList<Cluster> getClusters() {
		return clusters;
	}

	public void setClusters(ArrayList<Cluster> clusters) {
		this.clusters = clusters;
	}

	public double getWithinClusterSumSq() {
		return withinClusterSumSq;
	}

	public void setWithinClusterSumSq(double withinClusterSumSq) {
		this.withinClusterSumSq = withinClusterSumSq;
	}

	public double getBetweenClusterSumSq() {
		return betweenClusterSumSq;
	}

	public void setBetweenClusterSumSq(double betweenClusterSumSq) {
		this.betweenClusterSumSq = betweenClusterSumSq;
	}

}
