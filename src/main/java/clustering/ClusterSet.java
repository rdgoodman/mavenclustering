package clustering;

import java.util.ArrayList;

public class ClusterSet {

	private ArrayList<Cluster> clusters;
	private double withinClusterSumSq;
	private double betweenClusterSumSq;

	/**
	 * Stores the results of a clustering algorithm
	 * 
	 * @param clusters
	 *            set of clusters generated by a run() method
	 */
	public ClusterSet(ArrayList<Cluster> clusters) {
		this.clusters = clusters;
	}

	/**
	 * Calculates cohesion
	 */
	public double calcCohesion() {
		double coh = 0;
		for (Cluster c : clusters) {
			coh += calcCoh(c);
		}
		System.out.println("Overall cohesion: " + coh);
		return coh;
	}

	/**
	 * Calculates separation
	 */
	public double calcSeparation() {
		double sep = 0;
		for (int i = 0; i < clusters.size(); i++) {
			for (int j = i + 1; j < clusters.size(); j++) {
				sep += calcSep(clusters.get(i), clusters.get(j));
			}
		}
		System.out.println("Overall separation: " + sep);
		return sep;
	}

	/**
	 * Calculates cohesion within a single cluster
	 */
	private double calcCoh(Cluster c) {
		double c_coh = 0;
		for (int i = 0; i < c.getPts().size(); i++) {
			for (int j = i + 1; j < c.getPts().size(); j++) {
				// calculates distance between all points in cluster
				c_coh = c.getPts().get(i).calcDist(c.getPts().get(j));
			}
		}
		if (c.getPts().size() > 0){
			c_coh += (c_coh / c.getPts().size());
		} else {
			c_coh += 0;
		}
		return c_coh;
	}

	/**
	 * Calculates separation between two clusters
	 */
	private double calcSep(Cluster c1, Cluster c2) {
		double sep = 0;
		for (int i = 0; i < c1.getPts().size(); i++) {
			for (int j = i + 1; j < c2.getPts().size(); j++) {
				// calculates distance from point i in c1 to point j in c2
				sep += c1.getPts().get(i).calcDist(c2.getPts().get(j));
			}
		}
		return sep;
	}

	/** Getters and setters */

	public ArrayList<Cluster> getClusters() {
		return clusters;
	}

	public void setClusters(ArrayList<Cluster> clusters) {
		this.clusters = clusters;
	}

	public double getWithinClusterSumSq() {
		return withinClusterSumSq;
	}

	public void setWithinClusterSumSq(double withinClusterSumSq) {
		this.withinClusterSumSq = withinClusterSumSq;
	}

	public double getBetweenClusterSumSq() {
		return betweenClusterSumSq;
	}

	public void setBetweenClusterSumSq(double betweenClusterSumSq) {
		this.betweenClusterSumSq = betweenClusterSumSq;
	}
	
	public void print(){
		for (Cluster c : clusters){
			for (Datum d : c.getPts()){
				d.print();
			}
		}
	}

}
